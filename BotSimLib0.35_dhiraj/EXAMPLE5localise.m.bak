clf;        %clears figures
clc;        %clears console
clear;      %clears workspace
close all
axis equal; %keeps the x and y scale the same
%map=[0,0;60,0;60,45;45,45;45,59;106,59;106,105;0,105];  %default map
%map=[0,0;60,0;60,50;100,50;70,0;110,0;150,80;30,80;30,40;0,80]; %long map
map = [-30,0;-30,40;30,40;30,60;5,60;45,90;85,60;60,60;60,40;120,40;120,60;95,60;135,90;175,60;150,60;150,40;210,40;210,60;185,60;225,90;265,60;240,60;240,40;300,40;300,0];

botSim = BotSim(map,[5,0.005,0.05]);  %sets up a botSim object a map, and debug mode on.
%botSim = BotSim(map,[0,0,0]);  %sets up a botSim object a map, and debug mode on.
%botSim = BotSim(map,[0,0,0]);
readings = 16
botSim.setScanConfig(botSim.generateScanConfig(readings));

botSim.drawMap();
drawnow;

botSim.randomPose(10); %puts the robot in a random position at least 10cm away from a wall
%botSim.setBotPos([115 65]);
%botSim.setBotPos([20 20]);
%botSim.setBotPos([-25 20]);
%botSim.setBotPos([-20 30]);
target = botSim.getRndPtInMap(10);  %gets random target.
%target = [295 25];
%target = [80 10];
plot(target(:,1),target(:,2),'x');
[Noise_level, mean_vec] = s_noise_detector(botSim)
 %starts timer
tic
%your localisation function is called here.
%% setup code
%you can modify the map to take account of your robots configuration space
%give instructions to botsim object
modifiedMap = map; %you need to do this modification yourself
botSim.setMap(modifiedMap);
max_dim = max([max(map(:,1))-min(map(:,1)) max(map(:,2))-min(map(:,2))]);
num = round(450/330*max_dim); % number of particles
particles(num,1) = BotSim; %how to set up a vector of objects
chosen_particles(num,1) = BotSim(modifiedMap);   
final_particles(num,1) = BotSim(modifiedMap);
for i=1:num
    particles(i) = BotSim(modifiedMap);  %each particle should use the same map as the botSim object
    chosen_particles(i) = BotSim(modifiedMap);
    chosen_particles(i).setScanConfig(botSim.generateScanConfig(readings));
    particles(i).randomPose(5); %spawn the particles in random locations
    %index_initial = round(rand(1)*(size(workspace,1)-1))+1;
    %particles(i).setBotPos([workspace(index_initial,:)]);
    %particles(i).setBotAng(2*pi*rand(1));
    %workspace(index_initial,:) = [];
    particles(i).setScanConfig(botSim.generateScanConfig(readings));
end
path_plan = 0;
localise = 0;
[returnedBot particles pos ang] = localise_final3(botSim,chosen_particles,particles,map,target,readings, Noise_level,num,path_plan,max_dim,[],[],[],localise); %Where the magic happens
num = round(num/2);
path_plan = 1;
localise = 1;

for i=1:num
    final_particles(i) = BotSim(modifiedMap);
    final_particles(i).setScanConfig(botSim.generateScanConfig(readings));
    
    final_particles(i).setBotPos(particles(i).getBotPos());
    final_particles(i).setBotAng(particles(i).getBotAng());
    
    chosen_particles(i) = BotSim(modifiedMap);
    chosen_particles(i).setScanConfig(botSim.generateScanConfig(readings));
end

[moveCmd turnCmd optimal] = pathPlan(botSim,map,target,pos,ang);
[returnedBot particles pos ang] = localise_final3(botSim,chosen_particles,final_particles,map,target,readings, Noise_level,num,path_plan,max_dim,moveCmd,turnCmd,optimal,localise);

%close_array = map_obstacle(map,1,1);

%[move turn optimal] = Astar(round(pos),ang,round(target),close_array,1,botSim);
returnedBot.drawBot(60,'m')
drawnow
% currentAng= ang;
% for i=1:size(move)
% delta =turn(i)- currentAng;
% botSim.turn(delta);
% botSim.move(move(i));
% currentAng = turn(i);
% currentPos = botSim.getBotPos();
% %x =[currentPos(1) currentPos(1)+cos(currentAng)*3];
% %y = [currentPos(2) currentPos(2)+sin(currentAng)*3];
% botSim.drawBot(3,'g');
% %refreshdata(h1,'caller')
% %refreshdata(h2,'caller')
% drawnow
% end
% plot(target(:,1),target(:,2),'x','MarkerSize', 20);
 %stops timer
%end
resultsTime = toc
%calculated how far away your robot is from the target.
resultsDis =  distance(target, botSim.getBotPos())